// <auto-generated/>
#nullable enable
/// <inheritdoc/>
namespace Pretender.SourceGeneration
{
    using System.Reflection;
    using Pretender;

    /// <inheritdoc/>
    internal class PretendISimpleInterface8199A3 : global::ISimpleInterface
    {
        public static readonly MethodInfo MethodInfo_Foo_3EB6F56 = typeof(global::ISimpleInterface).GetMethod(nameof(Foo))!;
        public static readonly MethodInfo MethodInfo_VoidMethod_4CB5F7 = typeof(global::ISimpleInterface).GetMethod(nameof(VoidMethod))!;
        public static readonly MethodInfo MethodInfo_AsyncMethod_3177B39 = typeof(global::ISimpleInterface).GetMethod(nameof(AsyncMethod))!;
        public static readonly MethodInfo MethodInfo_AsyncReturningMethod_35E1C1E = typeof(global::ISimpleInterface).GetMethod(nameof(AsyncReturningMethod))!;
        public static readonly MethodInfo MethodInfo_TryParse_3859BF9 = typeof(global::ISimpleInterface).GetMethod(nameof(TryParse))!;
        public static readonly MethodInfo MethodInfo_get_Bar_3685A65 = typeof(global::ISimpleInterface).GetProperty(nameof(Bar)).GetMethod!;
        public static readonly MethodInfo MethodInfo_set_Bar_2D53694 = typeof(global::ISimpleInterface).GetProperty(nameof(Bar)).SetMethod!;
        private readonly Pretend<global::ISimpleInterface> _pretend;
        /// <inheritdoc/>
        public PretendISimpleInterface8199A3(Pretend<global::ISimpleInterface> pretend)
        {
            _pretend = pretend;
        }

        public string? Foo(string? bar, int baz)
        {
            object? [] __arguments = [bar, baz];
            var __callInfo = new CallInfo(MethodInfo_Foo_3EB6F56, __arguments);
            _pretend.Handle(__callInfo);
            return (string? )__callInfo.ReturnValue;
        }

        public void VoidMethod(bool baz)
        {
            object? [] __arguments = [baz];
            var __callInfo = new CallInfo(MethodInfo_VoidMethod_4CB5F7, __arguments);
            _pretend.Handle(__callInfo);
        }

        public global::System.Threading.Tasks.Task AsyncMethod()
        {
            object? [] __arguments = [];
            var __callInfo = new CallInfo(MethodInfo_AsyncMethod_3177B39, __arguments);
            _pretend.Handle(__callInfo);
            return (global::System.Threading.Tasks.Task)__callInfo.ReturnValue;
        }

        public global::System.Threading.Tasks.Task<string> AsyncReturningMethod(string bar)
        {
            object? [] __arguments = [bar];
            var __callInfo = new CallInfo(MethodInfo_AsyncReturningMethod_35E1C1E, __arguments);
            _pretend.Handle(__callInfo);
            return (global::System.Threading.Tasks.Task<string>)__callInfo.ReturnValue;
        }

        public bool TryParse(string thing, out bool myValue)
        {
            object? [] __arguments = [thing, myValue];
            var __callInfo = new CallInfo(MethodInfo_TryParse_3859BF9, __arguments);
            _pretend.Handle(__callInfo);
            myValue = __arguments[1];
            return (bool)__callInfo.ReturnValue;
        }

        public string Bar
        {
            get
            {
                object? [] __arguments = [];
                var __callInfo = new CallInfo(MethodInfo_get_Bar_3685A65, __arguments);
                _pretend.Handle(__callInfo);
                return (string)__callInfo.ReturnValue;
            }

            set
            {
                object? [] __arguments = [value];
                var __callInfo = new CallInfo(MethodInfo_set_Bar_2D53694, __arguments);
                _pretend.Handle(__callInfo);
            }
        }
    }
}