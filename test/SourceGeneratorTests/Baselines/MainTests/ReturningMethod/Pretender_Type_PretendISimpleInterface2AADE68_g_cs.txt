// <auto-generated/>
#nullable enable
/// <inheritdoc/>
internal class PretendISimpleInterface2AADE68 : global::ISimpleInterface
{
    public static readonly global::System.Reflection.MethodInfo MethodInfo_Foo_30A5A51 = typeof(global::ISimpleInterface).GetMethod(nameof(Foo))!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_VoidMethod_369C2F4 = typeof(global::ISimpleInterface).GetMethod(nameof(VoidMethod))!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_AsyncMethod_30D4D3B = typeof(global::ISimpleInterface).GetMethod(nameof(AsyncMethod))!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_AsyncReturningMethod_24A71EA = typeof(global::ISimpleInterface).GetMethod(nameof(AsyncReturningMethod))!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_TryParse_85E202 = typeof(global::ISimpleInterface).GetMethod(nameof(TryParse))!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_get_Bar_3177B39 = typeof(global::ISimpleInterface).GetProperty(nameof(Bar)).GetMethod!;
    public static readonly global::System.Reflection.MethodInfo MethodInfo_set_Bar_392D46 = typeof(global::ISimpleInterface).GetProperty(nameof(Bar)).SetMethod!;
    private readonly global::Pretender.Pretend<global::ISimpleInterface> _pretend;
    /// <inheritdoc/>
    public PretendISimpleInterface2AADE68(global::Pretender.Pretend<global::ISimpleInterface> pretend)
    {
        _pretend = pretend;
    }

    public string? Foo(string? bar, int baz)
    {
        Span<object?> arguments = [bar, baz];
        var callInfo = new global::Pretender.CallInfo(MethodInfo_Foo_30A5A51, arguments);
        _pretend.Handle(ref callInfo);
        return (string)callInfo.ReturnValue;
    }

    public void VoidMethod(bool baz)
    {
        Span<object?> arguments = [baz];
        var callInfo = new global::Pretender.CallInfo(MethodInfo_VoidMethod_369C2F4, arguments);
        _pretend.Handle(ref callInfo);
    }

    public global::System.Threading.Tasks.Task AsyncMethod()
    {
        Span<object?> arguments = [];
        var callInfo = new global::Pretender.CallInfo(MethodInfo_AsyncMethod_30D4D3B, arguments);
        _pretend.Handle(ref callInfo);
        return (global::System.Threading.Tasks.Task)callInfo.ReturnValue;
    }

    public global::System.Threading.Tasks.Task<string> AsyncReturningMethod(string bar)
    {
        Span<object?> arguments = [bar];
        var callInfo = new global::Pretender.CallInfo(MethodInfo_AsyncReturningMethod_24A71EA, arguments);
        _pretend.Handle(ref callInfo);
        return (global::System.Threading.Tasks.Task<string>)callInfo.ReturnValue;
    }

    public bool TryParse(string thing, out bool myValue)
    {
        Span<object?> arguments = [thing, myValue];
        var callInfo = new global::Pretender.CallInfo(MethodInfo_TryParse_85E202, arguments);
        _pretend.Handle(ref callInfo);
        myValue = arguments[1];
        return (bool)callInfo.ReturnValue;
    }

    public string Bar
    {
        get
        {
            Span<object?> arguments = [];
            var callInfo = new global::Pretender.CallInfo(MethodInfo_get_Bar_3177B39, arguments);
            _pretend.Handle(ref callInfo);
            return (string)callInfo.ReturnValue;
        }

        set
        {
            Span<object?> arguments = [value];
            var callInfo = new global::Pretender.CallInfo(MethodInfo_set_Bar_392D46, arguments);
            _pretend.Handle(ref callInfo);
        }
    }
}